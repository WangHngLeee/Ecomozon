{"ast":null,"code":"import Axios from 'axios';\nimport { ORDER_CREATE_SUCCESS, ORDER_CREATE_FAIL, ORDER_CREATE_REQUEST, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAIL, ORDER_PAY_REQUEST, ORDER_PAY_SUCCESS, ORDER_PAY_FAIL, MY_ORDER_LIST_SUCCESS, MY_ORDER_LIST_REQUEST, MY_ORDER_LIST_FAIL, ORDER_LIST_REQUEST, ORDER_LIST_SUCCESS, ORDER_LIST_FAIL, ORDER_DELETE_REQUEST, ORDER_DELETE_SUCCESS, ORDER_DELETE_FAIL } from '../constants/orderConstants';\n\nconst createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST,\n      payload: order\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data: {\n        data: newOrder\n      }\n    } = await Axios.post(\"/api/orders\", order, {\n      headers: {\n        'Authorization': 'HomLee ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: newOrder\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsOrder = orderId => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DETAILS_REQUEST,\n      payload: orderId\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await Axios.get(\"/api/orders/\" + orderId, {\n      headers: {\n        'Authorization': 'HomLee ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst listMyOrders = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: MY_ORDER_LIST_REQUEST\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await Axios.get(\"/api/orders/mine\", {\n      headers: {\n        'Authorization': 'HomLee ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: MY_ORDER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: MY_ORDER_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst listOrders = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_LIST_REQUEST\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await Axios.get(\"/api/orders\", {\n      headers: {\n        'Authorization': 'HomLee ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: ORDER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst deleteOrder = orderId => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DELETE_REQUEST,\n      payload: orderId\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await Axios.delete(\"/api/orders/\" + orderId, {\n      headers: {\n        'Authorization': 'HomLee ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: ORDER_DELETE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DELETE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst payOrder = (order, paymentResult) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_PAY_REQUEST,\n      payload: paymentResult\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await Axios.put(\"/api/orders/\" + order._id + \"/pay\", paymentResult, {\n      headers: {\n        'Authorization': 'HomLee ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: ORDER_PAY_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_PAY_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { createOrder, detailsOrder, payOrder, listMyOrders, listOrders, deleteOrder };","map":{"version":3,"sources":["/Users/hongliwang/Desktop/项目/Ecomozon/frontend/src/actions/orderActions.js"],"names":["Axios","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","ORDER_CREATE_REQUEST","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_FAIL","ORDER_PAY_REQUEST","ORDER_PAY_SUCCESS","ORDER_PAY_FAIL","MY_ORDER_LIST_SUCCESS","MY_ORDER_LIST_REQUEST","MY_ORDER_LIST_FAIL","ORDER_LIST_REQUEST","ORDER_LIST_SUCCESS","ORDER_LIST_FAIL","ORDER_DELETE_REQUEST","ORDER_DELETE_SUCCESS","ORDER_DELETE_FAIL","createOrder","order","dispatch","getState","type","payload","userSignin","userInfo","data","newOrder","post","headers","token","error","message","detailsOrder","orderId","get","listMyOrders","listOrders","deleteOrder","delete","payOrder","paymentResult","put","_id"],"mappings":"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","sourcesContent":["import Axios from 'axios';\nimport { ORDER_CREATE_SUCCESS, ORDER_CREATE_FAIL, ORDER_CREATE_REQUEST, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAIL, ORDER_PAY_REQUEST, ORDER_PAY_SUCCESS, ORDER_PAY_FAIL, MY_ORDER_LIST_SUCCESS, MY_ORDER_LIST_REQUEST, MY_ORDER_LIST_FAIL, ORDER_LIST_REQUEST, ORDER_LIST_SUCCESS, ORDER_LIST_FAIL, ORDER_DELETE_REQUEST, ORDER_DELETE_SUCCESS, ORDER_DELETE_FAIL } from '../constants/orderConstants';\n\nconst createOrder = (order) => async (dispatch, getState) => {\n    try {\n        dispatch({type: ORDER_CREATE_REQUEST, payload: order});\n        const {userSignin : {userInfo}} = getState();\n\n        const {data : {data: newOrder}} = await Axios.post(\"/api/orders\", order, {\n            headers:{\n                'Authorization': 'HomLee ' + userInfo.token\n            }\n        });\n        dispatch({type: ORDER_CREATE_SUCCESS, payload: newOrder});\n    } catch (error) {\n        dispatch({type:ORDER_CREATE_FAIL, payload: error.message});\n    }\n}\n\nconst detailsOrder = (orderId) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: ORDER_DETAILS_REQUEST, payload: orderId });\n      const { userSignin: { userInfo } } = getState();\n      const { data } = await Axios.get(\"/api/orders/\" + orderId, {\n          headers:\n          {\n              'Authorization': 'HomLee ' + userInfo.token\n      }})\n      dispatch({ type: ORDER_DETAILS_SUCCESS, payload: data })\n    } catch (error) {\n      dispatch({ type: ORDER_DETAILS_FAIL, payload: error.message });\n    }\n  }\n\n\n  const listMyOrders = () => async (dispatch, getState) => {\n    try {\n      dispatch({ type: MY_ORDER_LIST_REQUEST });\n      const { userSignin: { userInfo } } = getState();\n      const { data } = await Axios.get(\"/api/orders/mine\", {\n          headers:\n          {\n              'Authorization': 'HomLee ' + userInfo.token\n      }})\n      dispatch({ type: MY_ORDER_LIST_SUCCESS, payload: data })\n    } catch (error) {\n      dispatch({ type: MY_ORDER_LIST_FAIL, payload: error.message });\n    }\n  }\n\n  const listOrders = () => async (dispatch, getState) => {\n    try {\n      dispatch({ type: ORDER_LIST_REQUEST });\n      const { userSignin: { userInfo } } = getState();\n      const { data } = await Axios.get(\"/api/orders\", {\n        headers:\n          { 'Authorization': 'HomLee ' + userInfo.token }\n      });\n      dispatch({ type: ORDER_LIST_SUCCESS, payload: data })\n    } catch (error) {\n      dispatch({ type: ORDER_LIST_FAIL, payload: error.message });\n    }\n  }\n\n  const deleteOrder = (orderId) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: ORDER_DELETE_REQUEST, payload: orderId });\n      const { userSignin: { userInfo } } = getState();\n      const { data } = await Axios.delete(\"/api/orders/\" + orderId, {\n          headers:\n          {\n              'Authorization': 'HomLee ' + userInfo.token}\n      });\n      dispatch({ type: ORDER_DELETE_SUCCESS, payload: data })\n    } catch (error) {\n      dispatch({ type: ORDER_DELETE_FAIL, payload: error.message });\n    }\n  }\n\n  const payOrder = (order, paymentResult) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: ORDER_PAY_REQUEST, payload: paymentResult });\n      const { userSignin: { userInfo } } = getState();\n      const { data } = await Axios.put(\"/api/orders/\" + order._id + \"/pay\", paymentResult, {\n          headers:\n          {\n              'Authorization': 'HomLee ' + userInfo.token}\n      });\n      dispatch({ type: ORDER_PAY_SUCCESS, payload: data })\n    } catch (error) {\n      dispatch({ type: ORDER_PAY_FAIL, payload: error.message });\n    }\n  }\n\nexport {createOrder,detailsOrder, payOrder, listMyOrders, listOrders, deleteOrder};\n\n"]},"metadata":{},"sourceType":"module"}